{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { loadAsync } from 'expo-font';\nexport function useFonts(map) {\n  let [loaded, setLoaded] = useState(false);\n  let [error, setError] = useState(null);\n  useEffect(() => {\n    loadAsync(map).then(() => setLoaded(true)).catch(setError);\n  }, []);\n  return [loaded, error];\n}","map":{"version":3,"names":["useEffect","useState","loadAsync","useFonts","map","loaded","setLoaded","error","setError","then","catch"],"sources":["/workspaces/expo-todo-list/node_modules/@expo-google-fonts/dm-sans/useFonts.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from 'expo-font';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [loaded, error] = useFonts(...);\n */\nexport function useFonts(map) {\n  let [loaded, setLoaded] = useState(false);\n  let [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,SAAS,QAAQ,WAAW;AAYrC,OAAO,SAASC,QAAQA,CAACC,GAAG,EAAE;EAC5B,IAAI,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACzC,IAAI,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdE,SAAS,CAACE,GAAG,CAAC,CACXK,IAAI,CAAC,MAAMH,SAAS,CAAC,IAAI,CAAC,CAAC,CAC3BI,KAAK,CAACF,QAAQ,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACH,MAAM,EAAEE,KAAK,CAAC;AACxB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}